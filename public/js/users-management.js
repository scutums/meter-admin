document.addEventListener('DOMContentLoaded', function() {
    loadNavbar();
    loadUsers();
    setupEventListeners();
});

function setupEventListeners() {
    document.getElementById('saveUserChanges').addEventListener('click', saveUserChanges);
}

// –ó–∞–≥—Ä—É–∂–∞–µ—Ç –Ω–∞–≤–∏–≥–∞—Ü–∏–æ–Ω–Ω—É—é –ø–∞–Ω–µ–ª—å
async function loadNavbar() {
    const res = await fetch("/partials/nav.html");
    const html = await res.text();
    document.getElementById("navbar-placeholder").innerHTML = html;

    try {
        const token = localStorage.getItem("token");
        const resUser = await fetch("/api/auth-user-info", {
            headers: { Authorization: "Bearer " + token }
        });
        if (resUser.ok) {
            const user = await resUser.json();
            document.getElementById("username").textContent = "üë§ " + (user.full_name || user.plot_number || "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å");
        } else {
            document.getElementById("username").textContent = "üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å";
        }
    } catch {
        document.getElementById("username").textContent = "üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å";
    }

    document.getElementById("logoutBtn")?.addEventListener("click", () => {
        localStorage.removeItem("token");
        window.location.href = "/login.html";
    });
}

// –ó–∞–≥—Ä—É–∂–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
async function loadUsers() {
    try {
        const response = await fetch('/api/users', {
            headers: {
                'Authorization': `Bearer ${localStorage.getItem('token')}`
            }
        });
        
        if (!response.ok) {
            throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π');
        }

        const users = await response.json();
        const tableBody = document.getElementById('usersTableBody');
        tableBody.innerHTML = '';

        users.forEach(user => {
            const row = document.createElement('tr');
            row.innerHTML = `
                <td>${user.plot_number}</td>
                <td>${user.full_name}</td>
                <td>${user.phone || '-'}</td>
                <td class="text-center">
                    ${user.viber_registered ? '‚úÖ' : '‚ùå'}
                </td>
                <td class="text-center">
                    ${user.reminder_enabled ? '‚úÖ' : '‚ùå'}
                </td>
                <td class="text-center">
                    ${user.days_until_reminder !== null ? user.days_until_reminder : '-'}
                </td>
                <td class="text-center">
                    <button class="btn btn-sm btn-primary edit-user" data-user-id="${user.id}">
                        –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å
                    </button>
                </td>
            `;
            tableBody.appendChild(row);
        });

        // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π –¥–ª—è –∫–Ω–æ–ø–æ–∫ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        document.querySelectorAll('.edit-user').forEach(button => {
            button.addEventListener('click', () => openEditModal(button.dataset.userId));
        });

    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:', error);
        alert('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π');
    }
}

// –û—Ç–∫—Ä—ã–≤–∞–µ—Ç –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
function openEditModal(userId) {
    const user = document.querySelector(`[data-user-id="${userId}"]`).closest('tr');
    const plotNumber = user.cells[0].textContent;
    const fullName = user.cells[1].textContent;
    const phone = user.cells[2].textContent;

    document.getElementById('editUserId').value = userId;
    document.getElementById('editPlotNumber').value = plotNumber;
    document.getElementById('editFullName').value = fullName;
    document.getElementById('editPhone').value = phone;

    const modal = new bootstrap.Modal(document.getElementById('editUserModal'));
    modal.show();
}

// –°–æ—Ö—Ä–∞–Ω—è–µ—Ç –∏–∑–º–µ–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
async function saveUserChanges() {
    const userId = document.getElementById('editUserId').value;
    const fullName = document.getElementById('editFullName').value;
    const phone = document.getElementById('editPhone').value;

    try {
        const response = await fetch(`/api/users/${userId}`, {
            method: 'PUT',
            headers: {
                'Content-Type': 'application/json',
                'Authorization': `Bearer ${localStorage.getItem('token')}`
            },
            body: JSON.stringify({
                full_name: fullName,
                phone: phone
            })
        });

        if (!response.ok) {
            throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è');
        }

        // –ó–∞–∫—Ä—ã–≤–∞–µ–º –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –∏ –æ–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫
        const modal = bootstrap.Modal.getInstance(document.getElementById('editUserModal'));
        modal.hide();
        loadUsers();
        
        alert('–î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω—ã');
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', error);
        alert('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è');
    }
} 