import express from "express";
import axios from "axios";

// –ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ Viber –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
// –¢–æ–∫–µ–Ω –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ –≤—Å–µ—Ö –∑–∞–ø—Ä–æ—Å–æ–≤ –∫ API Viber
const VIBER_AUTH_TOKEN = process.env.VIBER_AUTH_TOKEN || '507a9cdad4e7e728-44afb7e01b8d3350-b88a8c0308784366';

/**
 * –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –º–∞—Ä—à—Ä—É—Ç–æ–≤ Viber –±–æ—Ç–∞
 * @param {Object} db - –û–±—ä–µ–∫—Ç –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–ø—Ä–æ—Å–æ–≤
 * @returns {Object} Express router —Å –Ω–∞—Å—Ç—Ä–æ–µ–Ω–Ω—ã–º–∏ –º–∞—Ä—à—Ä—É—Ç–∞–º–∏
 */
export default function viberRoutes(db) {
  // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π —Ä–æ—É—Ç–µ—Ä Express
  const router = express.Router();

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ Viber —á–µ—Ä–µ–∑ API
   * @param {string} viber_id - –£–Ω–∏–∫–∞–ª—å–Ω—ã–π –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ Viber
   * @returns {Object|null} –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ –∏–ª–∏ null –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏
   */
  async function getViberUserDetails(viber_id) {
    try {
      // –õ–æ–≥–∏—Ä—É–µ–º –Ω–∞—á–∞–ª–æ –∑–∞–ø—Ä–æ—Å–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
      console.log('Getting user details for:', viber_id);
      
      // –í—ã–ø–æ–ª–Ω—è–µ–º –∑–∞–ø—Ä–æ—Å –∫ API Viber –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
      const response = await axios.post("https://chatapi.viber.com/pa/get_user_details", {
        id: viber_id
      }, {
        headers: {
          "X-Viber-Auth-Token": VIBER_AUTH_TOKEN
        }
      });
      
      // –õ–æ–≥–∏—Ä—É–µ–º –ø–æ–ª–Ω—ã–π –æ—Ç–≤–µ—Ç –æ—Ç API Viber
      console.log('Full Viber API response:', JSON.stringify(response.data, null, 2));
      
      // –õ–æ–≥–∏—Ä—É–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      if (response.data && response.data.user) {
        console.log('User details from Viber:', {
          id: response.data.user.id,
          name: response.data.user.name,
          phone_number: response.data.user.phone_number,
          language: response.data.user.language,
          country: response.data.user.country
        });
      }
      
      return response.data;
    } catch (err) {
      // –õ–æ–≥–∏—Ä—É–µ–º –æ—à–∏–±–∫—É –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
      console.error("Error getting Viber user details:", err.response?.data || err.message);
      return null;
    }
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–Ω–æ–ø–æ–∫ –¥–ª—è –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –º–µ–Ω—é –∫–æ–º–∞–Ω–¥
   * @returns {Array} –ú–∞—Å—Å–∏–≤ –æ–±—ä–µ–∫—Ç–æ–≤ —Å —Ç–µ–∫—Å—Ç–æ–º –∏ –∫–æ–º–∞–Ω–¥–æ–π –¥–ª—è –∫–∞–∂–¥–æ–π –∫–Ω–æ–ø–∫–∏
   */
  function getCommandButtons() {
    return [
      { text: "üìã –ò–Ω—Ñ–æ", command: "–∏–Ω—Ñ–æ" },           // –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± —É—á–∞—Å—Ç–∫–µ
      { text: "üìä –ü–æ–∫–∞–∑–∞–Ω–∏—è", command: "–ø–æ–∫–∞–∑–∞–Ω–∏—è" }, // –ü–æ–∫–∞–∑–∞–Ω–∏—è —Å—á–µ—Ç—á–∏–∫–∞
      { text: "üí∞ –ò—Å—Ç–æ—Ä–∏—è –æ–ø–ª–∞—Ç", command: "–æ–ø–ª–∞—Ç–∞" }, // –ò—Å—Ç–æ—Ä–∏—è –æ–ø–ª–∞—Ç
      { text: "üí≥ –†–µ–∫–≤–∏–∑–∏—Ç—ã", command: "—Ä–µ–∫–≤–∏–∑–∏—Ç—ã" }, // –†–µ–∫–≤–∏–∑–∏—Ç—ã –¥–ª—è –æ–ø–ª–∞—Ç—ã
      { text: "üìà –†–∞—Å—Ö–æ–¥", command: "—Ä–∞—Å—Ö–æ–¥" },       // –†–∞—Å—Ö–æ–¥ —ç–ª–µ–∫—Ç—Ä–æ—ç–Ω–µ—Ä–≥–∏–∏
      { text: "üîî –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è", command: "—É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è" }, // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
      { text: "‚è∞ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ", command: "–Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ" }, // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π
      { text: "üì± –¢–µ–ª–µ—Ñ–æ–Ω", command: "—Ç–µ–ª–µ—Ñ–æ–Ω" },     // –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ç–µ–ª–µ—Ñ–æ–Ω–µ
      { text: "‚ùå –û—Ç–≤—è–∑–∞—Ç—å", command: "–æ—Ç–≤—è–∑–∞—Ç—å" },    // –û—Ç–≤—è–∑–∫–∞ Viber –æ—Ç —É—á–∞—Å—Ç–∫–∞
      { text: "‚ùì –ü–æ–º–æ—â—å", command: "–ø–æ–º–æ—â—å" }         // –°–ø—Ä–∞–≤–∫–∞ –ø–æ –∫–æ–º–∞–Ω–¥–∞–º
    ];
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–Ω–æ–ø–æ–∫ –¥–ª—è –ø—Ä–æ—Ü–µ—Å—Å–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
   * @returns {Array} –ú–∞—Å—Å–∏–≤ –æ–±—ä–µ–∫—Ç–æ–≤ —Å —Ç–µ–∫—Å—Ç–æ–º –∏ –∫–æ–º–∞–Ω–¥–æ–π –¥–ª—è –∫–Ω–æ–ø–æ–∫ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
   */
  function getRegistrationButtons() {
    return [
      { text: "‚ùå –û—Ç–º–µ–Ω–∞", command: "–æ—Ç–º–µ–Ω–∞" } // –ö–Ω–æ–ø–∫–∞ –æ—Ç–º–µ–Ω—ã —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
    ];
  }

  /**
   * –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–ø–∏—Å–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ—Ç –±–æ—Ç–∞
   * @param {string} viber_id - ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ Viber
   */
  async function handleUnsubscribe(viber_id) {
    try {
      console.log('Processing unsubscribe for viber_id:', viber_id);
      
      // –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      await db.query(
        `UPDATE users 
         SET viber_id = NULL, 
             viber_details = NULL,
             notifications_enabled = 1
         WHERE viber_id = ?`,
        [viber_id]
      );

      // –õ–æ–≥–∏—Ä—É–µ–º –æ—Ç–ø–∏—Å–∫—É
      await db.query(
        `INSERT INTO bot_actions (viber_id, action_type, action_data) 
         VALUES (?, ?, ?)`,
        [viber_id, 'unsubscribe', '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–ø–∏—Å–∞–ª—Å—è –æ—Ç –±–æ—Ç–∞']
      );

      console.log('Successfully processed unsubscribe for viber_id:', viber_id);
    } catch (err) {
      console.error('Error processing unsubscribe:', err);
    }
  }

  /**
   * –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –≤ Viber
   * @param {string} viber_id - ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ Viber
   * @param {string} message - –¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
   * @param {Array} buttons - –ú–∞—Å—Å–∏–≤ –∫–Ω–æ–ø–æ–∫ –¥–ª—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
   */
  async function sendViberMessage(viber_id, message, buttons = null) {
    try {
      // –õ–æ–≥–∏—Ä—É–µ–º –æ—Ç–ø—Ä–∞–≤–∫—É —Å–æ–æ–±—â–µ–Ω–∏—è
      console.log(`Sending message to ${viber_id}: ${message}`);
      console.log('Using Viber token:', VIBER_AUTH_TOKEN);
      
      // –§–æ—Ä–º–∏—Ä—É–µ–º –±–∞–∑–æ–≤—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Å–æ–æ–±—â–µ–Ω–∏—è
      const messageData = {
        receiver: viber_id,
        type: "text",
        text: message
      };

      // –ï—Å–ª–∏ –µ—Å—Ç—å –∫–Ω–æ–ø–∫–∏, –¥–æ–±–∞–≤–ª—è–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
      if (buttons) {
        messageData.keyboard = {
          Type: "keyboard",
          Buttons: buttons.map(button => ({
            Columns: 3, // –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–æ–ª–æ–Ω–æ–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏
            Rows: 1,    // –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç—Ä–æ–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏
            Text: button.text, // –¢–µ–∫—Å—Ç –∫–Ω–æ–ø–∫–∏
            ActionType: "reply", // –¢–∏–ø –¥–µ–π—Å—Ç–≤–∏—è –ø—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏
            ActionBody: button.command, // –ö–æ–º–∞–Ω–¥–∞, –∫–æ—Ç–æ—Ä–∞—è –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –ø—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏
            TextSize: "regular", // –†–∞–∑–º–µ—Ä —Ç–µ–∫—Å—Ç–∞
            TextHAlign: "center", // –ì–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω–æ–µ –≤—ã—Ä–∞–≤–Ω–∏–≤–∞–Ω–∏–µ
            TextVAlign: "middle", // –í–µ—Ä—Ç–∏–∫–∞–ª—å–Ω–æ–µ –≤—ã—Ä–∞–≤–Ω–∏–≤–∞–Ω–∏–µ
            BgColor: "#FFFFFF", // –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π —Ü–≤–µ—Ç —Ñ–æ–Ω–∞ Viber
            TextColor: "#000000", // –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π —Ü–≤–µ—Ç —Ç–µ–∫—Å—Ç–∞ Viber
            BorderWidth: 3, // –£–≤–µ–ª–∏—á–µ–Ω–Ω–∞—è —à–∏—Ä–∏–Ω–∞ –≥—Ä–∞–Ω–∏—Ü—ã
            BorderColor: "#7367F0", // –§–∏–æ–ª–µ—Ç–æ–≤—ã–π —Ü–≤–µ—Ç –≥—Ä–∞–Ω–∏—Ü—ã (—Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π —Ü–≤–µ—Ç Viber)
            Silent: false // –ó–≤—É–∫ –ø—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏
          }))
        };
      }
      
      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —á–µ—Ä–µ–∑ API Viber
      const response = await axios.post("https://chatapi.viber.com/pa/send_message", messageData, {
        headers: {
          "X-Viber-Auth-Token": VIBER_AUTH_TOKEN
        }
      });
      console.log('Viber API response:', response.data);
    } catch (err) {
      // –õ–æ–≥–∏—Ä—É–µ–º –æ—à–∏–±–∫—É –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è
      console.error("Error sending Viber message:", err.response?.data || err.message);
    }
  }

  /**
   * –†–∞—Å—á–µ—Ç —Å—Ä–µ–¥–Ω–µ–≥–æ —Ä–∞—Å—Ö–æ–¥–∞ —ç–ª–µ–∫—Ç—Ä–æ—ç–Ω–µ—Ä–≥–∏–∏ –∑–∞ —É–∫–∞–∑–∞–Ω–Ω—ã–π –ø–µ—Ä–∏–æ–¥
   * @param {number} userId - ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
   * @param {number} months - –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–µ—Å—è—Ü–µ–≤ –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞
   * @returns {number|null} –°—Ä–µ–¥–Ω–∏–π —Ä–∞—Å—Ö–æ–¥ –∏–ª–∏ null –ø—Ä–∏ –Ω–µ–¥–æ—Å—Ç–∞—Ç–∫–µ –¥–∞–Ω–Ω—ã—Ö
   */
  async function calculateAverageConsumption(userId, months = 3) {
    // –ü–æ–ª—É—á–∞–µ–º –ø–æ–∫–∞–∑–∞–Ω–∏—è —Å—á–µ—Ç—á–∏–∫–∞ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ N –º–µ—Å—è—Ü–µ–≤
    const [readings] = await db.query(
      `SELECT reading_date, value 
       FROM readings 
       WHERE user_id = ? 
       ORDER BY reading_date DESC 
       LIMIT ?`,
      [userId, months + 1]
    );

    // –ï—Å–ª–∏ –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º null
    if (readings.length < 2) return null;

    // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –æ–±—â–∏–π —Ä–∞—Å—Ö–æ–¥
    let totalConsumption = 0;
    for (let i = 0; i < readings.length - 1; i++) {
      totalConsumption += readings[i].value - readings[i + 1].value;
    }

    // –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Å—Ä–µ–¥–Ω–∏–π —Ä–∞—Å—Ö–æ–¥
    return Math.round(totalConsumption / (readings.length - 1));
  }

  /**
   * –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–µ–±—Ö—É–∫–æ–≤ –æ—Ç Viber
   * –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Ä–∞–∑–ª–∏—á–Ω—ã–µ —Å–æ–±—ã—Ç–∏—è: —Å–æ–æ–±—â–µ–Ω–∏—è, –Ω–∞—á–∞–ª–æ –¥–∏–∞–ª–æ–≥–∞, –ø–æ–¥–ø–∏—Å–∫—É –∏ —Ç.–¥.
   */
  router.post("/webhook", async (req, res) => {
    try {
      // –õ–æ–≥–∏—Ä—É–µ–º –ø–æ–ª—É—á–µ–Ω–Ω—ã–π –≤–µ–±—Ö—É–∫
      console.log('Received webhook:', JSON.stringify(req.body, null, 2));
      const { event, sender, message, user_id } = req.body;

      // –ü–æ–ª—É—á–∞–µ–º viber_id –∏–∑ –¥–∞–Ω–Ω—ã—Ö –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è –∏–ª–∏ —Å–æ–±—ã—Ç–∏—è
      const viber_id = sender?.id || user_id;
      
      // –ï—Å–ª–∏ viber_id –Ω–µ –Ω–∞–π–¥–µ–Ω, –∑–∞–≤–µ—Ä—à–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É
      if (!viber_id) {
        console.log('No viber_id found in webhook data');
        return res.status(200).json({ status: "ok" });
      }

      // –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–ø–∏—Å–∫–∏ –æ—Ç –±–æ—Ç–∞
      if (event === "unsubscribed") {
        console.log('User unsubscribed:', viber_id);
        await handleUnsubscribe(viber_id);
        return res.status(200).json({ status: "ok" });
      }

      // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      if (event === "message" && message && message.type === "text") {
        const message_text = message.text.toLowerCase();

        console.log(`Processing message from ${viber_id}: ${message_text}`);

        // –õ–æ–≥–∏—Ä—É–µ–º –¥–µ–π—Å—Ç–≤–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
        await db.query(
          `INSERT INTO bot_actions (viber_id, action_type, action_data) 
           VALUES (?, ?, ?)`,
          [viber_id, 'message', message_text]
        );

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
        const [users] = await db.query("SELECT * FROM users WHERE viber_id = ?", [viber_id]);
        console.log(`User lookup result:`, users);
        
        if (users.length > 0) {
          // –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω - –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–æ–º–∞–Ω–¥—ã
          const user = users[0];
          
          // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö –∫–æ–º–∞–Ω–¥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
          switch (message_text) {
            case "–ø–æ–º–æ—â—å":
              // –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–ø–∏—Å–∫–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥
              const helpMessage = `–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:
üìã –∏–Ω—Ñ–æ - –æ–±—â–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –ø–æ —É—á–∞—Å—Ç–∫—É
üìä –ø–æ–∫–∞–∑–∞–Ω–∏—è - –ø–æ—Å–ª–µ–¥–Ω–∏–µ –ø–æ–∫–∞–∑–∞–Ω–∏—è —Å—á–µ—Ç—á–∏–∫–∞
üí∞ –∏—Å—Ç–æ—Ä–∏—è –æ–ø–ª–∞—Ç - –∏—Å—Ç–æ—Ä–∏—è –ø–ª–∞—Ç–µ–∂–µ–π
üí≥ —Ä–µ–∫–≤–∏–∑–∏—Ç—ã - —Ä–µ–∫–≤–∏–∑–∏—Ç—ã –¥–ª—è –æ–ø–ª–∞—Ç—ã
üìà —Ä–∞—Å—Ö–æ–¥ - —Ä–∞—Å—Ö–æ–¥ —ç–ª–µ–∫—Ç—Ä–æ—ç–Ω–µ—Ä–≥–∏–∏
üîî —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è - –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
‚è∞ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ - –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π
üì± —Ç–µ–ª–µ—Ñ–æ–Ω - –ø–æ–∫–∞–∑–∞—Ç—å –ø—Ä–∏–≤—è–∑–∞–Ω–Ω—ã–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞
‚ùå –æ—Ç–≤—è–∑–∞—Ç—å - –æ—Ç–≤—è–∑–∞—Ç—å Viber –æ—Ç —É—á–∞—Å—Ç–∫–∞
‚ùì –ø–æ–º–æ—â—å - –ø–æ–∫–∞–∑–∞—Ç—å —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ`;
              await sendViberMessage(viber_id, helpMessage, getCommandButtons());
              await db.query(
                `INSERT INTO bot_actions (viber_id, action_type, action_data) 
                 VALUES (?, ?, ?)`,
                [viber_id, 'help_request', '–ó–∞–ø—Ä–æ—Å —Å–ø–∏—Å–∫–∞ –∫–æ–º–∞–Ω–¥']
              );
              break;

            case "—Ç–µ–ª–µ—Ñ–æ–Ω":
              // –û—Ç–ø—Ä–∞–≤–∫–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø—Ä–∏–≤—è–∑–∞–Ω–Ω–æ–º —Ç–µ–ª–µ—Ñ–æ–Ω–µ
              if (user.phone) {
                await sendViberMessage(
                  viber_id,
                  `–í–∞—à –ø—Ä–∏–≤—è–∑–∞–Ω–Ω—ã–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞: ${user.phone}`,
                  getCommandButtons()
                );
              } else {
                await sendViberMessage(
                  viber_id,
                  "–£ –≤–∞—Å –Ω–µ –ø—Ä–∏–≤—è–∑–∞–Ω –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –≤ —Å–∏—Å—Ç–µ–º–µ.",
                  getCommandButtons()
                );
              }
              await db.query(
                `INSERT INTO bot_actions (viber_id, action_type, action_data) 
                 VALUES (?, ?, ?)`,
                [viber_id, 'phone_check', '–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∏–≤—è–∑–∞–Ω–Ω–æ–≥–æ –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞']
              );
              break;

            case "—Ä–∞—Å—Ö–æ–¥":
              // –ü–æ–ª—É—á–µ–Ω–∏–µ –∏ –æ—Ç–ø—Ä–∞–≤–∫–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ä–∞—Å—Ö–æ–¥–µ —ç–ª–µ–∫—Ç—Ä–æ—ç–Ω–µ—Ä–≥–∏–∏
              const [consumptionReadings] = await db.query(
                `SELECT reading_date, value 
                 FROM readings 
                 WHERE user_id = ? 
                 ORDER BY reading_date DESC 
                 LIMIT 6`,
                [user.id]
              );

              if (consumptionReadings.length < 2) {
                await sendViberMessage(viber_id, "–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ —Ä–∞—Å—Ö–æ–¥–∞.", getCommandButtons());
              } else {
                let consumptionMessage = "–†–∞—Å—Ö–æ–¥ —ç–ª–µ–∫—Ç—Ä–æ—ç–Ω–µ—Ä–≥–∏–∏:\n\n";
                for (let i = 0; i < consumptionReadings.length - 1; i++) {
                  const currentDate = new Date(consumptionReadings[i].reading_date);
                  const prevDate = new Date(consumptionReadings[i + 1].reading_date);
                  const consumption = consumptionReadings[i].value - consumptionReadings[i + 1].value;
                  const monthName = currentDate.toLocaleString('ru-RU', { month: 'long' });
                  consumptionMessage += `${monthName}: ${consumption} –∫–í—Ç‚ãÖ—á\n`;
                }

                const avgConsumption = await calculateAverageConsumption(user.id);
                if (avgConsumption) {
                  consumptionMessage += `\nüìä –°—Ä–µ–¥–Ω–∏–π —Ä–∞—Å—Ö–æ–¥: ${avgConsumption} –∫–í—Ç‚ãÖ—á/–º–µ—Å`;
                }

                await sendViberMessage(viber_id, consumptionMessage, getCommandButtons());
              }
              await db.query(
                `INSERT INTO bot_actions (viber_id, action_type, action_data) 
                 VALUES (?, ?, ?)`,
                [viber_id, 'consumption_request', `–ó–∞–ø—Ä–æ—Å —Ä–∞—Å—Ö–æ–¥–∞ –ø–æ —É—á–∞—Å—Ç–∫—É ${user.plot_number}`]
              );
              break;

            case "—É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è":
              // –í–∫–ª—é—á–µ–Ω–∏–µ/–≤—ã–∫–ª—é—á–µ–Ω–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
              const [settings] = await db.query(
                "SELECT notifications_enabled FROM users WHERE id = ?",
                [user.id]
              );
              const currentStatus = settings[0]?.notifications_enabled ? "–≤–∫–ª—é—á–µ–Ω—ã" : "–≤—ã–∫–ª—é—á–µ–Ω—ã";
              const newStatus = !settings[0]?.notifications_enabled;

              // –û–±–Ω–æ–≤–ª—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
              await db.query(
                "UPDATE users SET notifications_enabled = ? WHERE id = ?",
                [newStatus, user.id]
              );

              await sendViberMessage(
                viber_id,
                `–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è ${newStatus ? "–≤–∫–ª—é—á–µ–Ω—ã" : "–≤—ã–∫–ª—é—á–µ–Ω—ã"}.\n\n–í—ã –±—É–¥–µ—Ç–µ –ø–æ–ª—É—á–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ:\nüìä –ù–æ–≤—ã—Ö –ø–æ–∫–∞–∑–∞–Ω–∏—è—Ö\nüí∞ –ù–æ–≤—ã—Ö –æ–ø–ª–∞—Ç–∞—Ö\n‚ö†Ô∏è –ë–æ–ª—å—à–æ–º —Ä–∞—Å—Ö–æ–¥–µ`,
                getCommandButtons()
              );
              await db.query(
                `INSERT INTO bot_actions (viber_id, action_type, action_data) 
                 VALUES (?, ?, ?)`,
                [viber_id, 'notifications_toggle', `–ò–∑–º–µ–Ω–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –Ω–∞ ${newStatus}`]
              );
              break;

            case "–Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ":
              // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –¥–Ω—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è
              const [reminderSettings] = await db.query(
                "SELECT reminder_day FROM users WHERE id = ?",
                [user.id]
              );
              const currentDay = reminderSettings[0]?.reminder_day || 25;

              await sendViberMessage(
                viber_id,
                `–¢–µ–∫—É—â–∏–π –¥–µ–Ω—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è: ${currentDay} —á–∏—Å–ª–æ –∫–∞–∂–¥–æ–≥–æ –º–µ—Å—è—Ü–∞.\n\n–î–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ 28.`,
                getRegistrationButtons()
              );
              await db.query(
                `INSERT INTO bot_actions (viber_id, action_type, action_data) 
                 VALUES (?, ?, ?)`,
                [viber_id, 'reminder_request', `–ó–∞–ø—Ä–æ—Å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π`]
              );
              break;

            case "–∏–Ω—Ñ–æ":
              // –ü–æ–ª—É—á–µ–Ω–∏–µ –∏ –æ—Ç–ø—Ä–∞–≤–∫–∞ –æ–±—â–µ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± —É—á–∞—Å—Ç–∫–µ
              const [[tariffRow]] = await db.query(
                `SELECT value FROM tariff ORDER BY effective_date DESC LIMIT 1`
              );
              const tariff = tariffRow?.value || 4.75;

              const [[lastPayment]] = await db.query(
                `SELECT payment_date, paid_reading, debt, 
                  (SELECT value FROM tariff WHERE effective_date <= payment_date ORDER BY effective_date DESC LIMIT 1) as tariff
                 FROM payments WHERE user_id = ? ORDER BY payment_date DESC LIMIT 1`,
                [user.id]
              );

              const debt = lastPayment ? lastPayment.debt : null;
              const message = `–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –ø–æ —É—á–∞—Å—Ç–∫—É ${user.plot_number}:
üë§ –í–ª–∞–¥–µ–ª–µ—Ü: ${user.full_name}
üí∞ –î–æ–ª–≥: ${debt ?? '–Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö'}
üíµ –¢–µ–∫—É—â–∏–π —Ç–∞—Ä–∏—Ñ: ${tariff} –≥—Ä–Ω/–∫–í—Ç‚ãÖ—á`;
              
              await sendViberMessage(viber_id, message, getCommandButtons());
              await db.query(
                `INSERT INTO bot_actions (viber_id, action_type, action_data) 
                 VALUES (?, ?, ?)`,
                [viber_id, 'info_request', `–ó–∞–ø—Ä–æ—Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –ø–æ —É—á–∞—Å—Ç–∫—É ${user.plot_number}`]
              );
              break;

            case "–ø–æ–∫–∞–∑–∞–Ω–∏—è":
              // –ü–æ–ª—É—á–µ–Ω–∏–µ –∏ –æ—Ç–ø—Ä–∞–≤–∫–∞ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –ø–æ–∫–∞–∑–∞–Ω–∏–π —Å—á–µ—Ç—á–∏–∫–∞
              const [meterReadings] = await db.query(
                `SELECT reading_date, value 
                 FROM readings 
                 WHERE user_id = ? 
                 ORDER BY reading_date DESC 
                 LIMIT 3`,
                [user.id]
              );

              if (meterReadings.length === 0) {
                await sendViberMessage(viber_id, "–ü–æ–∫–∞–∑–∞–Ω–∏—è —Å—á–µ—Ç—á–∏–∫–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç.", getCommandButtons());
              } else {
                let readingsMessage = "–ü–æ—Å–ª–µ–¥–Ω–∏–µ –ø–æ–∫–∞–∑–∞–Ω–∏—è —Å—á–µ—Ç—á–∏–∫–∞:\n";
                meterReadings.forEach(r => {
                  const date = new Date(r.reading_date).toLocaleDateString('ru-RU');
                  readingsMessage += `üìÖ ${date}: ${r.value} –∫–í—Ç‚ãÖ—á\n`;
                });
                await sendViberMessage(viber_id, readingsMessage, getCommandButtons());
              }
              await db.query(
                `INSERT INTO bot_actions (viber_id, action_type, action_data) 
                 VALUES (?, ?, ?)`,
                [viber_id, 'readings_request', `–ó–∞–ø—Ä–æ—Å –ø–æ–∫–∞–∑–∞–Ω–∏–π –ø–æ —É—á–∞—Å—Ç–∫—É ${user.plot_number}`]
              );
              break;

            case "–æ–ø–ª–∞—Ç–∞":
              // –ü–æ–ª—É—á–µ–Ω–∏–µ –∏ –æ—Ç–ø—Ä–∞–≤–∫–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ—Å–ª–µ–¥–Ω–µ–π –æ–ø–ª–∞—Ç–µ
              const [[lastPaymentInfo]] = await db.query(
                `SELECT payment_date, paid_reading, 
                  (SELECT value FROM tariff WHERE effective_date <= payment_date ORDER BY effective_date DESC LIMIT 1) as tariff
                 FROM payments 
                 WHERE user_id = ? 
                 ORDER BY payment_date DESC 
                 LIMIT 1`,
                [user.id]
              );

              if (!lastPaymentInfo) {
                await sendViberMessage(viber_id, "–ò—Å—Ç–æ—Ä–∏—è –æ–ø–ª–∞—Ç –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç.", getCommandButtons());
              } else {
                const paymentDate = new Date(lastPaymentInfo.payment_date).toLocaleDateString('ru-RU');
                const amount = (lastPaymentInfo.paid_reading * lastPaymentInfo.tariff).toFixed(2);
                const paymentMessage = `–ü–æ—Å–ª–µ–¥–Ω—è—è –æ–ø–ª–∞—Ç–∞:
üìÖ –î–∞—Ç–∞: ${paymentDate}
‚ö° –û–ø–ª–∞—á–µ–Ω–æ: ${lastPaymentInfo.paid_reading} –∫–í—Ç‚ãÖ—á
üíµ –°—É–º–º–∞: ${amount} –≥—Ä–Ω.
üí∞ –¢–∞—Ä–∏—Ñ: ${lastPaymentInfo.tariff} –≥—Ä–Ω/–∫–í—Ç‚ãÖ—á`;
                await sendViberMessage(viber_id, paymentMessage, getCommandButtons());
              }
              await db.query(
                `INSERT INTO bot_actions (viber_id, action_type, action_data) 
                 VALUES (?, ?, ?)`,
                [viber_id, 'payment_request', `–ó–∞–ø—Ä–æ—Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± –æ–ø–ª–∞—Ç–µ –ø–æ —É—á–∞—Å—Ç–∫—É ${user.plot_number}`]
              );
              break;

            case "—Ä–µ–∫–≤–∏–∑–∏—Ç—ã":
              // –û—Ç–ø—Ä–∞–≤–∫–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ä–µ–∫–≤–∏–∑–∏—Ç–∞—Ö –¥–ª—è –æ–ø–ª–∞—Ç—ã
              const requisitesMessage = `üí≥ –†–µ–∫–≤–∏–∑–∏—Ç—ã –¥–ª—è –æ–ø–ª–∞—Ç—ã:

üè¶ –ë–∞–Ω–∫: –ü—Ä–∏–≤–∞—Ç–ë–∞–Ω–∫
üí≥ –ù–æ–º–µ—Ä –∫–∞—Ä—Ç—ã: 4444 5555 6666 7777
üë§ –ü–æ–ª—É—á–∞—Ç–µ–ª—å: –ò–≤–∞–Ω–æ–≤ –ò–≤–∞–Ω –ò–≤–∞–Ω–æ–≤–∏—á
üìù –ù–∞–∑–Ω–∞—á–µ–Ω–∏–µ: –û–ø–ª–∞—Ç–∞ –∑–∞ —ç–ª–µ–∫—Ç—Ä–æ—ç–Ω–µ—Ä–≥–∏—é, —É—á–∞—Å—Ç–æ–∫ ${user.plot_number}

‚ùóÔ∏è –í–ê–ñ–ù–û: –ü—Ä–∏ –æ–ø–ª–∞—Ç–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ —É–∫–∞–∑—ã–≤–∞–π—Ç–µ –Ω–æ–º–µ—Ä —É—á–∞—Å—Ç–∫–∞ –≤ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–∏ –ø–ª–∞—Ç–µ–∂–∞.`;
              await sendViberMessage(viber_id, requisitesMessage, getCommandButtons());
              await db.query(
                `INSERT INTO bot_actions (viber_id, action_type, action_data) 
                 VALUES (?, ?, ?)`,
                [viber_id, 'requisites_request', `–ó–∞–ø—Ä–æ—Å —Ä–µ–∫–≤–∏–∑–∏—Ç–æ–≤ –¥–ª—è –æ–ø–ª–∞—Ç—ã –ø–æ —É—á–∞—Å—Ç–∫—É ${user.plot_number}`]
              );
              break;

            case "–æ—Ç–≤—è–∑–∞—Ç—å":
              // –û—Ç–≤—è–∑–∫–∞ Viber –æ—Ç —É—á–∞—Å—Ç–∫–∞
              await db.query(
                "UPDATE users SET viber_id = NULL WHERE id = ?",
                [user.id]
              );
              await sendViberMessage(
                viber_id,
                `Viber —É—Å–ø–µ—à–Ω–æ –æ—Ç–≤—è–∑–∞–Ω –æ—Ç —É—á–∞—Å—Ç–∫–∞ ${user.plot_number}. –î–ª—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –ø—Ä–∏–≤—è–∑–∫–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–º–µ—Ä —É—á–∞—Å—Ç–∫–∞.`,
                getRegistrationButtons()
              );
              await db.query(
                `INSERT INTO bot_actions (viber_id, action_type, action_data) 
                 VALUES (?, ?, ?)`,
                [viber_id, 'unlink', `–û—Ç–≤—è–∑–∫–∞ Viber –æ—Ç —É—á–∞—Å—Ç–∫–∞ ${user.plot_number}`]
              );
              break;

            default:
              // –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–æ—Ü–µ—Å—Å–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
              const [tempRegistrations] = await db.query(
                "SELECT * FROM temp_registrations WHERE viber_id = ?",
                [viber_id]
              );

              if (tempRegistrations.length === 0) {
                
                // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–µ–∞–ª—å–Ω–æ–≥–æ –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞
                const phoneNumber = message_text.trim();
                console.log('Original phone number:', phoneNumber);
                
                // –ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞
                const normalizedPhone = phoneNumber.replace(/\D/g, '');
                console.log('Normalized phone number:', normalizedPhone);
                
                // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∞ –Ω–æ–º–µ—Ä–∞
                const isValidFormat = normalizedPhone.match(/^380\d{9}$/);
                console.log('Is valid format:', isValidFormat);
                
                if (isValidFormat) {
                  console.log('Phone number format is valid');
                  
                  // –ü–æ–∏—Å–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ –Ω–æ–º–µ—Ä—É —Ç–µ–ª–µ—Ñ–æ–Ω–∞
                  const [usersByPhone] = await db.query(
                    "SELECT * FROM users WHERE phone = ?",
                    [normalizedPhone]
                  );
                  console.log('Users found by phone:', usersByPhone);

                  if (usersByPhone.length > 0) {
                    const user = usersByPhone[0];
                    console.log('Found user:', user);
                    
                    if (user.viber_id) {
                      console.log('User already has viber_id:', user.viber_id);
                      await sendViberMessage(
                        viber_id,
                        "–≠—Ç–æ—Ç –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ —É–∂–µ –ø—Ä–∏–≤—è–∑–∞–Ω –∫ –¥—Ä—É–≥–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é Viber. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø—Ä–∞–≤–ª–µ–Ω–∏–µ –¥–ª—è —Ä–µ—à–µ–Ω–∏—è –≤–æ–ø—Ä–æ—Å–∞.",
                        getRegistrationButtons()
                      );
                    } else {
                      console.log('Saving to temp_registrations');
                      // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –≤–æ –≤—Ä–µ–º–µ–Ω–Ω—É—é —Ç–∞–±–ª–∏—Ü—É
                      await db.query(
                        "INSERT INTO temp_registrations (viber_id, phone) VALUES (?, ?)",
                        [viber_id, normalizedPhone]
                      );

                      await sendViberMessage(
                        viber_id,
                        "–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω. –¢–µ–ø–µ—Ä—å, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–º–µ—Ä –≤–∞—à–µ–≥–æ —É—á–∞—Å—Ç–∫–∞ (—Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã).",
                        getRegistrationButtons()
                      );
                    }
                  } else {
                    console.log('No user found with this phone number');
                    await sendViberMessage(
                      viber_id,
                      "–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–æ–º–µ—Ä –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø—Ä–∞–≤–ª–µ–Ω–∏–µ.",
                      getRegistrationButtons()
                    );
                  }
                } else {
                  console.log('Invalid phone number format');
                  await sendViberMessage(
                    viber_id,
                    "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–º–µ—Ä –≤ —Ñ–æ—Ä–º–∞—Ç–µ 380XXXXXXXXX (–±–µ–∑ +)",
                    getRegistrationButtons()
                  );
                }
              } else {
                // –í—Ç–æ—Ä–æ–π —à–∞–≥ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–æ–º–µ—Ä–∞ —É—á–∞—Å—Ç–∫–∞
                const plotNumber = message_text.trim();
                console.log('Checking plot number:', plotNumber);
                console.log('Temp registration:', tempRegistrations[0]);
                
                if (plotNumber.match(/^\d+$/)) {
                  // –ü–æ–ª—É—á–∞–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞
                  const tempReg = tempRegistrations[0];
                  console.log('Using phone from temp registration:', tempReg.phone);
                  
                  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–Ω–æ—Å—Ç—å —É—á–∞—Å—Ç–∫–∞
                  const [usersByPlot] = await db.query(
                    "SELECT * FROM users WHERE plot_number = ? AND phone = ? AND viber_id IS NULL",
                    [plotNumber, tempReg.phone]
                  );
                  console.log('Users found by plot and phone:', usersByPlot);

                  if (usersByPlot.length > 0) {
                    // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ Viber
                    const viberUser = await getViberUserDetails(viber_id);
                    const userDetails = viberUser ? JSON.stringify(viberUser) : null;

                    // –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                    await db.query(
                      "UPDATE users SET viber_id = ?, viber_details = ? WHERE id = ?",
                      [viber_id, userDetails, usersByPlot[0].id]
                    );

                    // –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—É—é —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é
                    await db.query(
                      "DELETE FROM temp_registrations WHERE viber_id = ?",
                      [viber_id]
                    );

                    // –õ–æ–≥–∏—Ä—É–µ–º —É—Å–ø–µ—à–Ω—É—é —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é
                    await db.query(
                      `INSERT INTO bot_actions (viber_id, action_type, action_data) 
                       VALUES (?, ?, ?)`,
                      [viber_id, 'registration', `–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å —É—á–∞—Å—Ç–∫–æ–º ${plotNumber} –∏ —Ç–µ–ª–µ—Ñ–æ–Ω–æ–º ${tempReg.phone}`]
                    );

                    await sendViberMessage(
                      viber_id,
                      `–£—Å–ø–µ—à–Ω–∞—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è! –¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –ø–æ–ª—É—á–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤–∞—à–µ–º —É—á–∞—Å—Ç–∫–µ ${plotNumber}.\n\n–û—Ç–ø—Ä–∞–≤—å—Ç–µ "–ø–æ–º–æ—â—å" –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥.`,
                      getCommandButtons()
                    );
                  } else {
                    console.log('No matching plot found for phone:', tempReg.phone);
                    await sendViberMessage(
                      viber_id,
                      "–£—á–∞—Å—Ç–æ–∫ —Å —Ç–∞–∫–∏–º –Ω–æ–º–µ—Ä–æ–º –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –Ω–µ –ø—Ä–∏–≤—è–∑–∞–Ω –∫ –≤–∞—à–µ–º—É –Ω–æ–º–µ—Ä—É —Ç–µ–ª–µ—Ñ–æ–Ω–∞.\n\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–æ–º–µ—Ä –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.\n\n–ï—Å–ª–∏ –≤—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ –Ω–æ–º–µ—Ä –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π, –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø—Ä–∞–≤–ª–µ–Ω–∏–µ.",
                      getRegistrationButtons()
                    );
                  }
                } else if (message_text.toLowerCase() === '–æ—Ç–º–µ–Ω–∞') {
                  // –û—Ç–º–µ–Ω–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
                  await db.query(
                    "DELETE FROM temp_registrations WHERE viber_id = ?",
                    [viber_id]
                  );
                  await sendViberMessage(
                    viber_id,
                    "–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞. –î–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã —Å –±–æ—Ç–æ–º, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–º–µ—Ä –≤–∞—à–µ–≥–æ —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ 380XXXXXXXXX (–±–µ–∑ +)"
                  );
                } else {
                  console.log('Invalid plot number format:', plotNumber);
                  await sendViberMessage(
                    viber_id,
                    "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –Ω–æ–º–µ—Ä–∞ —É—á–∞—Å—Ç–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã –Ω–æ–º–µ—Ä–∞ —É—á–∞—Å—Ç–∫–∞.",
                    getRegistrationButtons()
                  );
                }
              }
          }
          return res.status(200).json({ status: "ok" });
        }

        // –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω, –Ω–∞—á–∏–Ω–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
        const [tempRegistrations] = await db.query(
          "SELECT * FROM temp_registrations WHERE viber_id = ?",
          [viber_id]
        );
        console.log('Temp registration lookup:', tempRegistrations);

        if (tempRegistrations.length === 0) {
          
          // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–µ–∞–ª—å–Ω–æ–≥–æ –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞
          const phoneNumber = message_text.trim();
          console.log('Original phone number:', phoneNumber);
          
          // –ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞
          const normalizedPhone = phoneNumber.replace(/\D/g, '');
          console.log('Normalized phone number:', normalizedPhone);
          
          // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∞ –Ω–æ–º–µ—Ä–∞
          const isValidFormat = normalizedPhone.match(/^380\d{9}$/);
          console.log('Is valid format:', isValidFormat);
          
          if (isValidFormat) {
            console.log('Phone number format is valid');
            
            // –ü–æ–∏—Å–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ –Ω–æ–º–µ—Ä—É —Ç–µ–ª–µ—Ñ–æ–Ω–∞
            const [usersByPhone] = await db.query(
              "SELECT * FROM users WHERE phone = ?",
              [normalizedPhone]
            );
            console.log('Users found by phone:', usersByPhone);

            if (usersByPhone.length > 0) {
              const user = usersByPhone[0];
              console.log('Found user:', user);
              
              if (user.viber_id) {
                console.log('User already has viber_id:', user.viber_id);
                await sendViberMessage(
                  viber_id,
                  "–≠—Ç–æ—Ç –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ —É–∂–µ –ø—Ä–∏–≤—è–∑–∞–Ω –∫ –¥—Ä—É–≥–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é Viber. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø—Ä–∞–≤–ª–µ–Ω–∏–µ –¥–ª—è —Ä–µ—à–µ–Ω–∏—è –≤–æ–ø—Ä–æ—Å–∞.",
                  getRegistrationButtons()
                );
              } else {
                console.log('Saving to temp_registrations');
                // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –≤–æ –≤—Ä–µ–º–µ–Ω–Ω—É—é —Ç–∞–±–ª–∏—Ü—É
                await db.query(
                  "INSERT INTO temp_registrations (viber_id, phone) VALUES (?, ?)",
                  [viber_id, normalizedPhone]
                );

                await sendViberMessage(
                  viber_id,
                  "–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω. –¢–µ–ø–µ—Ä—å, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–º–µ—Ä –≤–∞—à–µ–≥–æ —É—á–∞—Å—Ç–∫–∞ (—Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã).",
                  getRegistrationButtons()
                );
              }
            } else {
              console.log('No user found with this phone number');
              await sendViberMessage(
                viber_id,
                "–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–æ–º–µ—Ä –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø—Ä–∞–≤–ª–µ–Ω–∏–µ.",
                getRegistrationButtons()
              );
            }
          } else {
            console.log('Invalid phone number format');
            await sendViberMessage(
              viber_id,
              "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–º–µ—Ä –≤ —Ñ–æ—Ä–º–∞—Ç–µ 380XXXXXXXXX (–±–µ–∑ +)",
              getRegistrationButtons()
            );
          }
        } else {
          // –í—Ç–æ—Ä–æ–π —à–∞–≥ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–æ–º–µ—Ä–∞ —É—á–∞—Å—Ç–∫–∞
          const plotNumber = message_text.trim();
          console.log('Checking plot number:', plotNumber);
          console.log('Temp registration:', tempRegistrations[0]);
          
          if (plotNumber.match(/^\d+$/)) {
            // –ü–æ–ª—É—á–∞–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞
            const tempReg = tempRegistrations[0];
            console.log('Using phone from temp registration:', tempReg.phone);
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–Ω–æ—Å—Ç—å —É—á–∞—Å—Ç–∫–∞
            const [usersByPlot] = await db.query(
              "SELECT * FROM users WHERE plot_number = ? AND phone = ? AND viber_id IS NULL",
              [plotNumber, tempReg.phone]
            );
            console.log('Users found by plot and phone:', usersByPlot);

            if (usersByPlot.length > 0) {
              // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ Viber
              const viberUser = await getViberUserDetails(viber_id);
              const userDetails = viberUser ? JSON.stringify(viberUser) : null;

              // –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
              await db.query(
                "UPDATE users SET viber_id = ?, viber_details = ? WHERE id = ?",
                [viber_id, userDetails, usersByPlot[0].id]
              );

              // –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—É—é —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é
              await db.query(
                "DELETE FROM temp_registrations WHERE viber_id = ?",
                [viber_id]
              );

              // –õ–æ–≥–∏—Ä—É–µ–º —É—Å–ø–µ—à–Ω—É—é —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é
              await db.query(
                `INSERT INTO bot_actions (viber_id, action_type, action_data) 
                 VALUES (?, ?, ?)`,
                [viber_id, 'registration', `–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å —É—á–∞—Å—Ç–∫–æ–º ${plotNumber} –∏ —Ç–µ–ª–µ—Ñ–æ–Ω–æ–º ${tempReg.phone}`]
              );

              await sendViberMessage(
                viber_id,
                `–£—Å–ø–µ—à–Ω–∞—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è! –¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –ø–æ–ª—É—á–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤–∞—à–µ–º —É—á–∞—Å—Ç–∫–µ ${plotNumber}.\n\n–û—Ç–ø—Ä–∞–≤—å—Ç–µ "–ø–æ–º–æ—â—å" –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥.`,
                getCommandButtons()
              );
            } else {
              console.log('No matching plot found for phone:', tempReg.phone);
              await sendViberMessage(
                viber_id,
                "–£—á–∞—Å—Ç–æ–∫ —Å —Ç–∞–∫–∏–º –Ω–æ–º–µ—Ä–æ–º –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –Ω–µ –ø—Ä–∏–≤—è–∑–∞–Ω –∫ –≤–∞—à–µ–º—É –Ω–æ–º–µ—Ä—É —Ç–µ–ª–µ—Ñ–æ–Ω–∞.\n\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–æ–º–µ—Ä –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.\n\n–ï—Å–ª–∏ –≤—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ –Ω–æ–º–µ—Ä –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π, –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø—Ä–∞–≤–ª–µ–Ω–∏–µ.",
                getRegistrationButtons()
              );
            }
          } else if (message_text.toLowerCase() === '–æ—Ç–º–µ–Ω–∞') {
            // –û—Ç–º–µ–Ω–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
            await db.query(
              "DELETE FROM temp_registrations WHERE viber_id = ?",
              [viber_id]
            );
            await sendViberMessage(
              viber_id,
              "–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞. –î–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã —Å –±–æ—Ç–æ–º, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–º–µ—Ä –≤–∞—à–µ–≥–æ —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ 380XXXXXXXXX (–±–µ–∑ +)"
            );
          } else {
            console.log('Invalid plot number format:', plotNumber);
            await sendViberMessage(
              viber_id,
              "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –Ω–æ–º–µ—Ä–∞ —É—á–∞—Å—Ç–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã –Ω–æ–º–µ—Ä–∞ —É—á–∞—Å—Ç–∫–∞.",
              getRegistrationButtons()
            );
          }
        }
        return res.status(200).json({ status: "ok" });
      } else if (event === "conversation_started") {
        // –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞—á–∞–ª–∞ –¥–∏–∞–ª–æ–≥–∞ —Å –±–æ—Ç–æ–º
        if (!sender) {
          console.log('No sender data in conversation_started');
          return res.status(200).json({ status: "ok" });
        }
        console.log('Conversation started with:', sender);
        const viberUser = await getViberUserDetails(viber_id);
        console.log('New user details:', viberUser);

        await sendViberMessage(
          viber_id, 
          "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –î–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã —Å –±–æ—Ç–æ–º, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–º–µ—Ä –≤–∞—à–µ–≥–æ —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ 380XXXXXXXXX.",
          getRegistrationButtons()
        );
      } else if (event === "subscribed") {
        // –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ –±–æ—Ç–∞
        if (!sender) {
          console.log('No sender data in subscribed');
          return res.status(200).json({ status: "ok" });
        }
        console.log('User subscribed:', sender);
        const viberUser = await getViberUserDetails(viber_id);
        console.log('New subscriber details:', viberUser);

        await sendViberMessage(
          viber_id, 
          "–°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–¥–ø–∏—Å–∫—É! –î–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã —Å –±–æ—Ç–æ–º, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–º–µ—Ä –≤–∞—à–µ–≥–æ —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ 380XXXXXXXXX.",
          getRegistrationButtons()
        );
      } else if (event === "delivered" || event === "seen") {
        // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–±—ã—Ç–∏–π –¥–æ—Å—Ç–∞–≤–∫–∏ –∏ –ø—Ä–æ—á—Ç–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π
        console.log(`Message ${event} by user ${viber_id}`);
      } else {
        console.log('Received non-message event:', event);
      }

      res.status(200).json({ status: "ok" });
    } catch (err) {
      console.error("Error processing webhook:", err);
      res.status(500).json({ error: "Internal server error" });
    }
  });

  /**
   * –ú–∞—Ä—à—Ä—É—Ç –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ –Ω–æ–≤—ã—Ö –ø–æ–∫–∞–∑–∞–Ω–∏—è—Ö —Å—á–µ—Ç—á–∏–∫–∞
   * @param {Object} req.body - –î–∞–Ω–Ω—ã–µ –∑–∞–ø—Ä–æ—Å–∞ (user_id, reading_date, value)
   */
  router.post("/notify-reading", async (req, res) => {
    try {
      const { user_id, reading_date, value } = req.body;
      
      // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
      const [users] = await db.query(
        "SELECT viber_id, notifications_enabled, plot_number FROM users WHERE id = ?",
        [user_id]
      );

      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ, –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ–¥–ø–∏—Å–∞–Ω –∏ –≤–∫–ª—é—á–∏–ª —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
      if (users.length > 0 && users[0].viber_id && users[0].notifications_enabled) {
        const message = `üìä –ù–æ–≤–æ–µ –ø–æ–∫–∞–∑–∞–Ω–∏–µ –ø–æ —É—á–∞—Å—Ç–∫—É ${users[0].plot_number}:\n–î–∞—Ç–∞: ${new Date(reading_date).toLocaleDateString('ru-RU')}\n–ó–Ω–∞—á–µ–Ω–∏–µ: ${value} –∫–í—Ç‚ãÖ—á`;
        await sendViberMessage(users[0].viber_id, message, getCommandButtons());
      }

      res.json({ status: "ok" });
    } catch (err) {
      console.error("Error sending reading notification:", err);
      res.status(500).json({ error: "Internal server error" });
    }
  });

  /**
   * –ú–∞—Ä—à—Ä—É—Ç –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ –Ω–æ–≤—ã—Ö –æ–ø–ª–∞—Ç–∞—Ö
   * @param {Object} req.body - –î–∞–Ω–Ω—ã–µ –∑–∞–ø—Ä–æ—Å–∞ (user_id, payment_date, paid_reading, tariff)
   */
  router.post("/notify-payment", async (req, res) => {
    try {
      const { user_id, payment_date, paid_reading, tariff } = req.body;
      
      // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
      const [users] = await db.query(
        "SELECT viber_id, notifications_enabled, plot_number FROM users WHERE id = ?",
        [user_id]
      );

      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ, –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ–¥–ø–∏—Å–∞–Ω –∏ –≤–∫–ª—é—á–∏–ª —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
      if (users.length > 0 && users[0].viber_id && users[0].notifications_enabled) {
        const amount = (paid_reading * tariff).toFixed(2);
        const message = `üí∞ –ù–æ–≤–∞—è –æ–ø–ª–∞—Ç–∞ –ø–æ —É—á–∞—Å—Ç–∫—É ${users[0].plot_number}:\n–î–∞—Ç–∞: ${new Date(payment_date).toLocaleDateString('ru-RU')}\n–û–ø–ª–∞—á–µ–Ω–æ: ${paid_reading} –∫–í—Ç‚ãÖ—á\n–°—É–º–º–∞: ${amount} –≥—Ä–Ω.`;
        await sendViberMessage(users[0].viber_id, message, getCommandButtons());
      }

      res.json({ status: "ok" });
    } catch (err) {
      console.error("Error sending payment notification:", err);
      res.status(500).json({ error: "Internal server error" });
    }
  });

  /**
   * –ú–∞—Ä—à—Ä—É—Ç –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏—Å—Ç–æ—Ä–∏–∏ –¥–µ–π—Å—Ç–≤–∏–π –±–æ—Ç–∞
   * –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø–æ—Å–ª–µ–¥–Ω–∏–µ 100 –¥–µ–π—Å—Ç–≤–∏–π —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è—Ö
   */
  router.get("/bot-actions", async (req, res) => {
    try {
      const [actions] = await db.query(`
        SELECT 
          ba.id,
          ba.viber_id,
          u.plot_number,
          u.full_name,
          ba.action_type,
          ba.action_data,
          ba.created_at
        FROM bot_actions ba
        LEFT JOIN users u ON ba.viber_id = u.viber_id
        ORDER BY ba.created_at DESC
        LIMIT 100
      `);

      res.json(actions);
    } catch (err) {
      console.error("Error getting bot actions:", err);
      res.status(500).json({ error: "Internal server error" });
    }
  });

  /**
   * –ú–∞—Ä—à—Ä—É—Ç –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
   * @param {Object} req.body - –î–∞–Ω–Ω—ã–µ –∑–∞–ø—Ä–æ—Å–∞ (viber_id)
   */
  router.post("/user-info", async (req, res) => {
    const { viber_id } = req.body;
    if (!viber_id) return res.status(400).json({ error: "viber_id –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω" });

    try {
      // –ü–æ–ª—É—á–∞–µ–º –æ—Å–Ω–æ–≤–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
      const [users] = await db.query("SELECT * FROM users WHERE viber_id = ?", [viber_id]);
      if (users.length === 0) return res.status(404).json({ error: "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω" });
      const user = users[0];

      // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π —Ç–∞—Ä–∏—Ñ
      const [[tariffRow]] = await db.query(
        `SELECT value FROM tariff ORDER BY effective_date DESC LIMIT 1`
      );
      const tariff = tariffRow?.value || 4.75;

      // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ—Å–ª–µ–¥–Ω–µ–π –æ–ø–ª–∞—Ç–µ
      const [[lastPayment]] = await db.query(
        `SELECT payment_date, paid_reading, debt, 
          (SELECT value FROM tariff WHERE effective_date <= payment_date ORDER BY effective_date DESC LIMIT 1) as tariff
         FROM payments WHERE user_id = ? ORDER BY payment_date DESC LIMIT 1`,
        [user.id]
      );

      const debt = lastPayment ? lastPayment.debt : null;

      // –ü–æ–ª—É—á–∞–µ–º –ø–æ–∫–∞–∑–∞–Ω–∏—è —Å—á–µ—Ç—á–∏–∫–∞ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 6 –º–µ—Å—è—Ü–µ–≤
      const [readings] = await db.query(
        `SELECT reading_date, value 
         FROM readings 
         WHERE user_id = ? AND reading_date >= DATE_SUB(CURDATE(), INTERVAL 6 MONTH)
         ORDER BY reading_date DESC`,
        [user.id]
      );

      // –õ–æ–≥–∏—Ä—É–µ–º –æ—Ç–ø—Ä–∞–≤–∫—É —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
      const message = `–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –ø–æ —É—á–∞—Å—Ç–∫—É ${user.plot_number}: –¥–æ–ª–≥ ${debt ?? '–Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö'}`;
      await db.query(
        `INSERT INTO notifications (user_id, message, via, success) VALUES (?, ?, 'viber', true)`,
        [user.id, message]
      );

      // –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Å–æ–±—Ä–∞–Ω–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
      res.json({
        plot_number: user.plot_number,
        full_name: user.full_name,
        debt,
        last_payment: lastPayment ? {
          date: lastPayment.payment_date,
          amount: lastPayment.paid_reading,
          tariff: lastPayment.tariff
        } : null,
        readings: readings.map(r => ({
          date: r.reading_date,
          value: r.value
        }))
      });
    } catch (err) {
      res.status(500).json({ error: "–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞", details: err.message });
    }
  });

  /**
   * –ú–∞—Ä—à—Ä—É—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞ –±–æ—Ç–∞
   * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ API Viber
   */
  router.get("/status", async (req, res) => {
    try {
      const response = await axios.get("https://chatapi.viber.com/pa/get_account_info", {
        headers: {
          "X-Viber-Auth-Token": VIBER_AUTH_TOKEN
        }
      });
      res.json(response.data);
    } catch (err) {
      console.error("Error checking bot status:", err.response?.data || err.message);
      res.status(500).json({ error: "Failed to get bot status" });
    }
  });

  /**
   * –ú–∞—Ä—à—Ä—É—Ç –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –≤–µ–±—Ö—É–∫–∞
   * @param {Object} req.body - –î–∞–Ω–Ω—ã–µ –∑–∞–ø—Ä–æ—Å–∞ (webhook_url)
   */
  router.post("/set-webhook", async (req, res) => {
    try {
      const { webhook_url } = req.body;
      if (!webhook_url) {
        return res.status(400).json({ error: "webhook_url is required" });
      }

      console.log('Setting webhook to:', webhook_url);
      const response = await axios.post("https://chatapi.viber.com/pa/set_webhook", {
        url: webhook_url,
        event_types: ["subscribed", "unsubscribed", "conversation_started", "message"]
      }, {
        headers: {
          "X-Viber-Auth-Token": VIBER_AUTH_TOKEN
        }
      });

      console.log('Webhook set response:', response.data);
      res.json(response.data);
    } catch (err) {
      console.error("Error setting webhook:", err.response?.data || err.message);
      res.status(500).json({ error: "Failed to set webhook" });
    }
  });

  return router;
} 