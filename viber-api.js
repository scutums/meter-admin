import express from "express";
import axios from "axios";

const VIBER_AUTH_TOKEN='507a9cdad4e7e728-44afb7e01b8d3350-b88a8c0308784366';

export default function viberRoutes(db) {
  const router = express.Router();

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π –≤ Viber
  async function sendViberMessage(viber_id, message) {
    try {
      await axios.post("https://chatapi.viber.com/pa/send_message", {
        receiver: viber_id,
        type: "text",
        text: message
      }, {
        headers: {
          "X-Viber-Auth-Token": VIBER_AUTH_TOKEN
        }
      });
    } catch (err) {
      console.error("Error sending Viber message:", err);
    }
  }

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ —Å—Ä–µ–¥–Ω–µ–≥–æ —Ä–∞—Å—Ö–æ–¥–∞
  async function calculateAverageConsumption(userId, months = 3) {
    const [readings] = await db.query(
      `SELECT reading_date, value 
       FROM readings 
       WHERE user_id = ? 
       ORDER BY reading_date DESC 
       LIMIT ?`,
      [userId, months + 1]
    );

    if (readings.length < 2) return null;

    let totalConsumption = 0;
    for (let i = 0; i < readings.length - 1; i++) {
      totalConsumption += readings[i].value - readings[i + 1].value;
    }

    return Math.round(totalConsumption / (readings.length - 1));
  }

  // Webhook –¥–ª—è Viber
  router.post("/webhook", async (req, res) => {
    try {
      const { event, sender, message } = req.body;

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      if (event === "message" && message.type === "text") {
        const viber_id = sender.id;
        const message_text = message.text.toLowerCase();

        // –õ–æ–≥–∏—Ä—É–µ–º –¥–µ–π—Å—Ç–≤–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        await db.query(
          `INSERT INTO bot_actions (viber_id, action_type, action_data) 
           VALUES (?, ?, ?)`,
          [viber_id, 'message', message_text]
        );

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
        const [users] = await db.query("SELECT * FROM users WHERE viber_id = ?", [viber_id]);
        
        if (users.length === 0) {
          // –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
          await sendViberMessage(viber_id, "–î–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã —Å –±–æ—Ç–æ–º, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–º–µ—Ä –≤–∞—à–µ–≥–æ —É—á–∞—Å—Ç–∫–∞.");
          await db.query(
            `INSERT INTO bot_actions (viber_id, action_type, action_data) 
             VALUES (?, ?, ?)`,
            [viber_id, 'unregistered_user', '–ü–æ–ø—ã—Ç–∫–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –±–æ—Ç–∞ –±–µ–∑ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏']
          );
          return res.status(200).json({ status: "ok" });
        }

        const user = users[0];

        // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥
        switch (message_text) {
          case "–ø–æ–º–æ—â—å":
            const helpMessage = `–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:
üìã –∏–Ω—Ñ–æ - –æ–±—â–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –ø–æ —É—á–∞—Å—Ç–∫—É
üìä –ø–æ–∫–∞–∑–∞–Ω–∏—è - –ø–æ—Å–ª–µ–¥–Ω–∏–µ –ø–æ–∫–∞–∑–∞–Ω–∏—è —Å—á–µ—Ç—á–∏–∫–∞
üí∞ –æ–ø–ª–∞—Ç–∞ - –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ—Å–ª–µ–¥–Ω–µ–π –æ–ø–ª–∞—Ç–µ
üìà —Ä–∞—Å—Ö–æ–¥ - —Ä–∞—Å—Ö–æ–¥ —ç–ª–µ–∫—Ç—Ä–æ—ç–Ω–µ—Ä–≥–∏–∏
üîî —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è - –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
‚è∞ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ - –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π
‚ùå –æ—Ç–≤—è–∑–∞—Ç—å - –æ—Ç–≤—è–∑–∞—Ç—å Viber –æ—Ç —É—á–∞—Å—Ç–∫–∞
‚ùì –ø–æ–º–æ—â—å - –ø–æ–∫–∞–∑–∞—Ç—å —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ`;
            await sendViberMessage(viber_id, helpMessage);
            await db.query(
              `INSERT INTO bot_actions (viber_id, action_type, action_data) 
               VALUES (?, ?, ?)`,
              [viber_id, 'help_request', '–ó–∞–ø—Ä–æ—Å —Å–ø–∏—Å–∫–∞ –∫–æ–º–∞–Ω–¥']
            );
            break;

          case "—Ä–∞—Å—Ö–æ–¥":
            const [consumptionReadings] = await db.query(
              `SELECT reading_date, value 
               FROM readings 
               WHERE user_id = ? 
               ORDER BY reading_date DESC 
               LIMIT 6`,
              [user.id]
            );

            if (consumptionReadings.length < 2) {
              await sendViberMessage(viber_id, "–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ —Ä–∞—Å—Ö–æ–¥–∞.");
            } else {
              let consumptionMessage = "–†–∞—Å—Ö–æ–¥ —ç–ª–µ–∫—Ç—Ä–æ—ç–Ω–µ—Ä–≥–∏–∏:\n\n";
              for (let i = 0; i < consumptionReadings.length - 1; i++) {
                const currentDate = new Date(consumptionReadings[i].reading_date);
                const prevDate = new Date(consumptionReadings[i + 1].reading_date);
                const consumption = consumptionReadings[i].value - consumptionReadings[i + 1].value;
                const monthName = currentDate.toLocaleString('ru-RU', { month: 'long' });
                consumptionMessage += `${monthName}: ${consumption} –∫–í—Ç‚ãÖ—á\n`;
              }

              const avgConsumption = await calculateAverageConsumption(user.id);
              if (avgConsumption) {
                consumptionMessage += `\nüìä –°—Ä–µ–¥–Ω–∏–π —Ä–∞—Å—Ö–æ–¥: ${avgConsumption} –∫–í—Ç‚ãÖ—á/–º–µ—Å`;
              }

              await sendViberMessage(viber_id, consumptionMessage);
            }
            await db.query(
              `INSERT INTO bot_actions (viber_id, action_type, action_data) 
               VALUES (?, ?, ?)`,
              [viber_id, 'consumption_request', `–ó–∞–ø—Ä–æ—Å —Ä–∞—Å—Ö–æ–¥–∞ –ø–æ —É—á–∞—Å—Ç–∫—É ${user.plot_number}`]
            );
            break;

          case "—É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è":
            const [settings] = await db.query(
              "SELECT notifications_enabled FROM users WHERE id = ?",
              [user.id]
            );
            const currentStatus = settings[0]?.notifications_enabled ? "–≤–∫–ª—é—á–µ–Ω—ã" : "–≤—ã–∫–ª—é—á–µ–Ω—ã";
            const newStatus = !settings[0]?.notifications_enabled;

            await db.query(
              "UPDATE users SET notifications_enabled = ? WHERE id = ?",
              [newStatus, user.id]
            );

            await sendViberMessage(
              viber_id,
              `–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è ${newStatus ? "–≤–∫–ª—é—á–µ–Ω—ã" : "–≤—ã–∫–ª—é—á–µ–Ω—ã"}.\n\n–í—ã –±—É–¥–µ—Ç–µ –ø–æ–ª—É—á–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ:\nüìä –ù–æ–≤—ã—Ö –ø–æ–∫–∞–∑–∞–Ω–∏—è—Ö\nüí∞ –ù–æ–≤—ã—Ö –æ–ø–ª–∞—Ç–∞—Ö\n‚ö†Ô∏è –ë–æ–ª—å—à–æ–º —Ä–∞—Å—Ö–æ–¥–µ`
            );
            await db.query(
              `INSERT INTO bot_actions (viber_id, action_type, action_data) 
               VALUES (?, ?, ?)`,
              [viber_id, 'notifications_toggle', `–ò–∑–º–µ–Ω–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –Ω–∞ ${newStatus}`]
            );
            break;

          case "–Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ":
            const [reminderSettings] = await db.query(
              "SELECT reminder_day FROM users WHERE id = ?",
              [user.id]
            );
            const currentDay = reminderSettings[0]?.reminder_day || 25;

            await sendViberMessage(
              viber_id,
              `–¢–µ–∫—É—â–∏–π –¥–µ–Ω—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è: ${currentDay} —á–∏—Å–ª–æ –∫–∞–∂–¥–æ–≥–æ –º–µ—Å—è—Ü–∞.\n\n–î–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ 28.`
            );
            await db.query(
              `INSERT INTO bot_actions (viber_id, action_type, action_data) 
               VALUES (?, ?, ?)`,
              [viber_id, 'reminder_request', `–ó–∞–ø—Ä–æ—Å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π`]
            );
            break;

          case "–∏–Ω—Ñ–æ":
            const [[tariffRow]] = await db.query(
              `SELECT value FROM tariff ORDER BY effective_date DESC LIMIT 1`
            );
            const tariff = tariffRow?.value || 4.75;

            const [[lastPayment]] = await db.query(
              `SELECT payment_date, paid_reading, debt, 
                (SELECT value FROM tariff WHERE effective_date <= payment_date ORDER BY effective_date DESC LIMIT 1) as tariff
               FROM payments WHERE user_id = ? ORDER BY payment_date DESC LIMIT 1`,
              [user.id]
            );

            const debt = lastPayment ? lastPayment.debt : null;
            const message = `–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –ø–æ —É—á–∞—Å—Ç–∫—É ${user.plot_number}:
üë§ –í–ª–∞–¥–µ–ª–µ—Ü: ${user.full_name}
üí∞ –î–æ–ª–≥: ${debt ?? '–Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö'}
üíµ –¢–µ–∫—É—â–∏–π —Ç–∞—Ä–∏—Ñ: ${tariff} —Ä—É–±/–∫–í—Ç‚ãÖ—á`;
            
            await sendViberMessage(viber_id, message);
            await db.query(
              `INSERT INTO bot_actions (viber_id, action_type, action_data) 
               VALUES (?, ?, ?)`,
              [viber_id, 'info_request', `–ó–∞–ø—Ä–æ—Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –ø–æ —É—á–∞—Å—Ç–∫—É ${user.plot_number}`]
            );
            break;

          case "–ø–æ–∫–∞–∑–∞–Ω–∏—è":
            const [meterReadings] = await db.query(
              `SELECT reading_date, value 
               FROM readings 
               WHERE user_id = ? 
               ORDER BY reading_date DESC 
               LIMIT 3`,
              [user.id]
            );

            if (meterReadings.length === 0) {
              await sendViberMessage(viber_id, "–ü–æ–∫–∞–∑–∞–Ω–∏—è —Å—á–µ—Ç—á–∏–∫–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç.");
            } else {
              let readingsMessage = "–ü–æ—Å–ª–µ–¥–Ω–∏–µ –ø–æ–∫–∞–∑–∞–Ω–∏—è —Å—á–µ—Ç—á–∏–∫–∞:\n";
              meterReadings.forEach(r => {
                const date = new Date(r.reading_date).toLocaleDateString('ru-RU');
                readingsMessage += `üìÖ ${date}: ${r.value} –∫–í—Ç‚ãÖ—á\n`;
              });
              await sendViberMessage(viber_id, readingsMessage);
            }
            await db.query(
              `INSERT INTO bot_actions (viber_id, action_type, action_data) 
               VALUES (?, ?, ?)`,
              [viber_id, 'readings_request', `–ó–∞–ø—Ä–æ—Å –ø–æ–∫–∞–∑–∞–Ω–∏–π –ø–æ —É—á–∞—Å—Ç–∫—É ${user.plot_number}`]
            );
            break;

          case "–æ–ø–ª–∞—Ç–∞":
            const [[lastPaymentInfo]] = await db.query(
              `SELECT payment_date, paid_reading, 
                (SELECT value FROM tariff WHERE effective_date <= payment_date ORDER BY effective_date DESC LIMIT 1) as tariff
               FROM payments 
               WHERE user_id = ? 
               ORDER BY payment_date DESC 
               LIMIT 1`,
              [user.id]
            );

            if (!lastPaymentInfo) {
              await sendViberMessage(viber_id, "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –æ–ø–ª–∞—Ç–∞—Ö –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç.");
            } else {
              const paymentDate = new Date(lastPaymentInfo.payment_date).toLocaleDateString('ru-RU');
              const amount = (lastPaymentInfo.paid_reading * lastPaymentInfo.tariff).toFixed(2);
              const paymentMessage = `–ü–æ—Å–ª–µ–¥–Ω—è—è –æ–ø–ª–∞—Ç–∞:
üìÖ –î–∞—Ç–∞: ${paymentDate}
‚ö° –û–ø–ª–∞—á–µ–Ω–æ: ${lastPaymentInfo.paid_reading} –∫–í—Ç‚ãÖ—á
üíµ –°—É–º–º–∞: ${amount} —Ä—É–±.
üí∞ –¢–∞—Ä–∏—Ñ: ${lastPaymentInfo.tariff} —Ä—É–±/–∫–í—Ç‚ãÖ—á`;
              await sendViberMessage(viber_id, paymentMessage);
            }
            await db.query(
              `INSERT INTO bot_actions (viber_id, action_type, action_data) 
               VALUES (?, ?, ?)`,
              [viber_id, 'payment_request', `–ó–∞–ø—Ä–æ—Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± –æ–ø–ª–∞—Ç–µ –ø–æ —É—á–∞—Å—Ç–∫—É ${user.plot_number}`]
            );
            break;

          case "–æ—Ç–≤—è–∑–∞—Ç—å":
            await db.query(
              "UPDATE users SET viber_id = NULL WHERE id = ?",
              [user.id]
            );
            await sendViberMessage(
              viber_id,
              `Viber —É—Å–ø–µ—à–Ω–æ –æ—Ç–≤—è–∑–∞–Ω –æ—Ç —É—á–∞—Å—Ç–∫–∞ ${user.plot_number}. –î–ª—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –ø—Ä–∏–≤—è–∑–∫–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–º–µ—Ä —É—á–∞—Å—Ç–∫–∞.`
            );
            await db.query(
              `INSERT INTO bot_actions (viber_id, action_type, action_data) 
               VALUES (?, ?, ?)`,
              [viber_id, 'unlink', `–û—Ç–≤—è–∑–∫–∞ Viber –æ—Ç —É—á–∞—Å—Ç–∫–∞ ${user.plot_number}`]
            );
            break;

          default:
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ —á–∏—Å–ª–æ–º –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è
            const reminderDay = parseInt(message_text);
            if (!isNaN(reminderDay) && reminderDay >= 1 && reminderDay <= 28) {
              await db.query(
                "UPDATE users SET reminder_day = ? WHERE id = ?",
                [reminderDay, user.id]
              );
              await sendViberMessage(
                viber_id,
                `–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –Ω–∞ ${reminderDay} —á–∏—Å–ª–æ –∫–∞–∂–¥–æ–≥–æ –º–µ—Å—è—Ü–∞.`
              );
              await db.query(
                `INSERT INTO bot_actions (viber_id, action_type, action_data) 
                 VALUES (?, ?, ?)`,
                [viber_id, 'reminder_set', `–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –¥–Ω—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –Ω–∞ ${reminderDay}`]
              );
            } else {
              // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–æ–º–µ—Ä–æ–º —É—á–∞—Å—Ç–∫–∞
              const plotNumber = parseInt(message_text);
              if (!isNaN(plotNumber)) {
                // –ò—â–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ –Ω–æ–º–µ—Ä—É —É—á–∞—Å—Ç–∫–∞
                const [usersByPlot] = await db.query(
                  "SELECT * FROM users WHERE plot_number = ? AND viber_id IS NULL",
                  [plotNumber]
                );

                if (usersByPlot.length > 0) {
                  // –û–±–Ω–æ–≤–ª—è–µ–º viber_id –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                  await db.query(
                    "UPDATE users SET viber_id = ? WHERE id = ?",
                    [viber_id, usersByPlot[0].id]
                  );
                  await sendViberMessage(
                    viber_id,
                    `–£—Å–ø–µ—à–Ω–∞—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è! –¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –ø–æ–ª—É—á–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤–∞—à–µ–º —É—á–∞—Å—Ç–∫–µ ${plotNumber}.\n\n–û—Ç–ø—Ä–∞–≤—å—Ç–µ "–ø–æ–º–æ—â—å" –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥.`
                  );
                  await db.query(
                    `INSERT INTO bot_actions (viber_id, action_type, action_data) 
                     VALUES (?, ?, ?)`,
                    [viber_id, 'registration', `–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å —É—á–∞—Å—Ç–∫–æ–º ${plotNumber}`]
                  );
                } else {
                  await sendViberMessage(
                    viber_id,
                    "–£—á–∞—Å—Ç–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ —É–∂–µ –ø—Ä–∏–≤—è–∑–∞–Ω –∫ –¥—Ä—É–≥–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é Viber. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–æ–º–µ—Ä —É—á–∞—Å—Ç–∫–∞."
                  );
                }
              } else {
                await sendViberMessage(
                  viber_id,
                  "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. –û—Ç–ø—Ä–∞–≤—å—Ç–µ '–ø–æ–º–æ—â—å' –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥."
                );
              }
            }
        }
      }

      res.status(200).json({ status: "ok" });
    } catch (err) {
      console.error("Error processing webhook:", err);
      res.status(500).json({ error: "Internal server error" });
    }
  });

  // –ú–∞—Ä—à—Ä—É—Ç –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ –Ω–æ–≤—ã—Ö –ø–æ–∫–∞–∑–∞–Ω–∏—è—Ö
  router.post("/notify-reading", async (req, res) => {
    try {
      const { user_id, reading_date, value } = req.body;
      
      // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
      const [users] = await db.query(
        "SELECT viber_id, notifications_enabled, plot_number FROM users WHERE id = ?",
        [user_id]
      );

      if (users.length > 0 && users[0].viber_id && users[0].notifications_enabled) {
        const message = `üìä –ù–æ–≤–æ–µ –ø–æ–∫–∞–∑–∞–Ω–∏–µ –ø–æ —É—á–∞—Å—Ç–∫—É ${users[0].plot_number}:\n–î–∞—Ç–∞: ${new Date(reading_date).toLocaleDateString('ru-RU')}\n–ó–Ω–∞—á–µ–Ω–∏–µ: ${value} –∫–í—Ç‚ãÖ—á`;
        await sendViberMessage(users[0].viber_id, message);
      }

      res.json({ status: "ok" });
    } catch (err) {
      console.error("Error sending reading notification:", err);
      res.status(500).json({ error: "Internal server error" });
    }
  });

  // –ú–∞—Ä—à—Ä—É—Ç –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ –Ω–æ–≤—ã—Ö –æ–ø–ª–∞—Ç–∞—Ö
  router.post("/notify-payment", async (req, res) => {
    try {
      const { user_id, payment_date, paid_reading, tariff } = req.body;
      
      // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
      const [users] = await db.query(
        "SELECT viber_id, notifications_enabled, plot_number FROM users WHERE id = ?",
        [user_id]
      );

      if (users.length > 0 && users[0].viber_id && users[0].notifications_enabled) {
        const amount = (paid_reading * tariff).toFixed(2);
        const message = `üí∞ –ù–æ–≤–∞—è –æ–ø–ª–∞—Ç–∞ –ø–æ —É—á–∞—Å—Ç–∫—É ${users[0].plot_number}:\n–î–∞—Ç–∞: ${new Date(payment_date).toLocaleDateString('ru-RU')}\n–û–ø–ª–∞—á–µ–Ω–æ: ${paid_reading} –∫–í—Ç‚ãÖ—á\n–°—É–º–º–∞: ${amount} —Ä—É–±.`;
        await sendViberMessage(users[0].viber_id, message);
      }

      res.json({ status: "ok" });
    } catch (err) {
      console.error("Error sending payment notification:", err);
      res.status(500).json({ error: "Internal server error" });
    }
  });

  // –ù–æ–≤—ã–π –º–∞—Ä—à—Ä—É—Ç –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–µ–π—Å—Ç–≤–∏–π –±–æ—Ç–∞
  router.get("/bot-actions", async (req, res) => {
    try {
      const [actions] = await db.query(`
        SELECT 
          ba.id,
          ba.viber_id,
          u.plot_number,
          u.full_name,
          ba.action_type,
          ba.action_data,
          ba.created_at
        FROM bot_actions ba
        LEFT JOIN users u ON ba.viber_id = u.viber_id
        ORDER BY ba.created_at DESC
        LIMIT 100
      `);

      res.json(actions);
    } catch (err) {
      console.error("Error getting bot actions:", err);
      res.status(500).json({ error: "Internal server error" });
    }
  });

  router.post("/user-info", async (req, res) => {
    const { viber_id } = req.body;
    if (!viber_id) return res.status(400).json({ error: "viber_id –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω" });

    try {
      const [users] = await db.query("SELECT * FROM users WHERE viber_id = ?", [viber_id]);
      if (users.length === 0) return res.status(404).json({ error: "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω" });
      const user = users[0];

      const [[tariffRow]] = await db.query(
        `SELECT value FROM tariff ORDER BY effective_date DESC LIMIT 1`
      );
      const tariff = tariffRow?.value || 4.75;

      const [[lastPayment]] = await db.query(
        `SELECT payment_date, paid_reading, debt, 
          (SELECT value FROM tariff WHERE effective_date <= payment_date ORDER BY effective_date DESC LIMIT 1) as tariff
         FROM payments WHERE user_id = ? ORDER BY payment_date DESC LIMIT 1`,
        [user.id]
      );

      const debt = lastPayment ? lastPayment.debt : null;

      const [readings] = await db.query(
        `SELECT reading_date, value 
         FROM readings 
         WHERE user_id = ? AND reading_date >= DATE_SUB(CURDATE(), INTERVAL 6 MONTH)
         ORDER BY reading_date DESC`,
        [user.id]
      );

      const message = `–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –ø–æ —É—á–∞—Å—Ç–∫—É ${user.plot_number}: –¥–æ–ª–≥ ${debt ?? '–Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö'}`;
      await db.query(
        `INSERT INTO notifications (user_id, message, via, success) VALUES (?, ?, 'viber', true)`,
        [user.id, message]
      );

      res.json({
        plot_number: user.plot_number,
        full_name: user.full_name,
        debt,
        last_payment: lastPayment ? {
          date: lastPayment.payment_date,
          amount: lastPayment.paid_reading,
          tariff: lastPayment.tariff
        } : null,
        readings: readings.map(r => ({
          date: r.reading_date,
          value: r.value
        }))
      });
    } catch (err) {
      res.status(500).json({ error: "–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞", details: err.message });
    }
  });

  return router;
} 